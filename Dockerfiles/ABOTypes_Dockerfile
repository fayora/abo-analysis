# Base image from ABOTypes Analysis
FROM  nvidia/cuda:12.0.0-runtime-ubuntu20.04

ARG GENERAL_DEPENDENCIES="wget apt-transport-https software-properties-common apt-utils sudo"

# Set non-interactive mode to override any user inputs requested by package installations
ENV DEBIAN_FRONTEND noninteractive

# Install dependencies
RUN apt-get update && \
    apt-get install --yes $GENERAL_DEPENDENCIES && \
    apt-get clean

# Install AzCopy (data movement tool)
RUN mkdir -p /home/azcopy && cd /home/azcopy && \
    wget -O azcopy.tar.gz https://aka.ms/downloadazcopy-v10-linux && \
    tar -xf azcopy.tar.gz --strip=1 
ENV PATH=/home/azcopy:$PATH

# Install PowerShell Core
RUN PLATFORM=$(lsb_release -rs) && \
    wget -q https://packages.microsoft.com/config/ubuntu/${PLATFORM}/packages-microsoft-prod.deb && \
    dpkg -i packages-microsoft-prod.deb && \
    apt-get update && \
    add-apt-repository universe && \
    apt-get install -y powershell

# Install Miniconda
#   Specify the path for the installation of conda environments
ARG CONDA_ENVS_PATH="/conda-envs"
#   Apply the path to the Conda binaries to the PATH environment variable on the container
ENV PATH="$CONDA_ENVS_PATH/bin:${PATH}"
ARG PATH="$CONDA_ENVS_PATH/bin:${PATH}"
#   Download the latest installer for Linux and then run the installation, specifying the path for conda environment
#   (-f skips error of folder already existing)
RUN wget \
    https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && mkdir -p /root/.conda \
    && mkdir -p $CONDA_ENVS_PATH \
    && bash Miniconda3-latest-Linux-x86_64.sh -b -f -p $CONDA_ENVS_PATH \
    && rm -f Miniconda3-latest-Linux-x86_64.sh 
#   Initialise Conda
RUN conda init
#   Finally, set the default path for environments
RUN conda config --append envs_dirs $CONDA_ENVS_PATH

# Install Mamba for faster resolution of Conda packages
RUN conda install -c conda-forge mamba

# Create a Conda environment for Bedtools
RUN mamba create -y -n bedtools_env -c bioconda bedtools

# Create a Conda environment for FastQC
RUN mamba create -y -n fastqc_env -c bioconda fastqc

# Create a Conda environment for MultiQC
RUN mamba create -y -n multiqc_env -c bioconda multiqc

# Create a Conda environment for Samtools and BWA
RUN mamba create -y -n samtools_and_bwa_env -c bioconda samtools bwa

# # Create a Conda environment for BWA
# RUN mamba create -y -n bwa_env -c bioconda bwa

# Install Python 3 tools
ARG PYTHON_TOOLS="pysam pandas scipy matplotlib biopython openpyxl"
RUN pip3 install --upgrade pip \
    && pip3 install $PYTHON_TOOLS

# Install Nextflow
#   Install the latest LTS version of the Adoptium Eclipse Temurin OpenJDK, 
#   as recommended for Nextflow (see: https://www.nextflow.io/docs/latest/getstarted.html#requirements)
RUN mkdir -p /etc/apt/keyrings \
    && wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
RUN echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
RUN apt-get update \
    && apt-get install --yes temurin-17-jdk
#   Install Nextflow now that Java is installed
RUN mkdir -p /nextflow_dir && cd /nextflow_dir \
    && wget -qO- https://get.nextflow.io | bash
#   Make Nextflow executable for all users, set it to self update, and then add it to PATH
RUN chmod a+rx /nextflow_dir/nextflow
ENV PATH="/nextflow_dir/:${PATH}"
ARG PATH="$/nextflow_dir/:${PATH}"
#   Run a first invocation of Nextflow so that it loads all its packages and dependencies
RUN nextflow self-update

# Define Command or Entry Point
CMD ["/bin/bash"]

# TO BUILD THE CONTAINER RUN:
#    docker build -t pathwestminion.azurecr.io/[**Type Name**]:v[**Type a New Version Number**] -f Dockerfile .  <--Note the period (".") at the end. This is required, and tells Docker to include files in the current folder
# For example:
#    docker build -t pathwestminion.azurecr.io/abotypes1.0:v1 -f Dockerfile .