// The database_dir  and database_name 
params {
    projectDir = "/abo-analysis"
    conda_envs_path = "/conda-envs"
	outdir = "${projectDir}/output"
	exonsix = "${projectDir}/assets/A1_01_01_1_reference_Exon6.fasta"
	exonseven = "${projectDir}/assets/A1_01_01_1_reference_Exon7.fasta"
	reads = "${projectDir}/fastq_files/*.fastq"
	database = "${projectDir}/assets/ABO_Database.fasta"
    abomain = "python ${projectDir}/bin/AnalyzeAbo_Main.py"
	help = false
	license = false
	version = false
	nostrip = false
	skip_multiqc = false
	multiqc_config = false
}

timeline {
    enabled = true
    file = "${params.outdir}/execution_timeline.html"
    timeline.overwrite = true
}
report {
    enabled = true
    file = "${params.outdir}/execution_report.html"
    report.overwrite = true
}
trace {
    enabled = true
    file = "${params.outdir}/execution_trace.txt"
    trace.overwrite = true
}
dag {
    file = "${params.outdir}/pipeline_dag.svg"
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'
podman.runOptions = '-u \$(id -u):\$(id -g)'

// Mount the filesystem with singularity.
singularity.autoMounts = true

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
                return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
                return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
                return obj
        }
    }
}


manifest {
    name = 'ABOtyper'
    author = 'Fredrick Mobegi'
    homePage = 'https://github.com/fmobegi/abo-analysis'
    description = 'A pipeline to determine ABO type using Oxford nanopore minION reads.'
    mainScript = 'main.nf'
    nextflowVersion = '>=21'
    version = '0.1'
}

conda.enabled = true
// eval "$(conda shell.bash hook)"
